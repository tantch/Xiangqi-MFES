class GeneralTest
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	brd: Board := new Board();
operations

	private assertTrue: bool ==> ()
		assertTrue(cond) == return
	pre cond;
	private testFreeMovement: () ==> ()
	testFreeMovement() == (
		
		--Red
		
		dcl genR: General := new General([5,1],<Red>);
		dcl genB: General := new General([5,10],<Black>);
		brd.board := {
			[5,1] |-> genR,
			[5,10] |-> genB
		};
		assertTrue(brd.board([5,1]).getCoord() = [5,1]);
		assertTrue(brd.board([5,1]) = genR);
			
		brd.moveTo([5,1],[5,2]);
		
		assertTrue(brd.board([5,2]).getCoord() = [5,2]);
		assertTrue(brd.board([5,2]) = genR);
		
		--cant go out of palace test
		
		brd.moveTo([5,2],[5,3]);
		brd.moveTo([5,3],[6,3]);
		
		assertTrue(brd.board([5,3]).getCoord() = [5,3]);
		assertTrue(brd.board([5,3]) = genR);
		
		brd.setPlayer(<Black>);
		-- Black
		
		assertTrue(brd.board([5,10]).getCoord() = [5,10]);
		assertTrue(brd.board([5,10]) = genB);
			
		brd.moveTo([5,10],[5,9]);
		
		assertTrue(brd.board([5,9]).getCoord() = [5,9]);
		assertTrue(brd.board([5,9]) = genB);
		
		--cant go out of palace test
		
		brd.moveTo([5,9],[5,8]);
		brd.moveTo([5,8],[5,7]);
		
		assertTrue(brd.board([5,8]).getCoord() = [5,8]);
		assertTrue(brd.board([5,8]) = genB);
	);
	
	
	public static main: () ==> ()
 	main() == (
		new GeneralTest().testFreeMovement();
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end GeneralTest