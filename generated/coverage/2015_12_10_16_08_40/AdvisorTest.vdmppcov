class AdvisorTest
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	brd: Board := new Board();
operations

	private assertTrue: bool ==> ()
		assertTrue(cond) == return
	pre cond;
	private testFreeMovement: () ==> ()
	testFreeMovement() == (
		
		--Red
		
		dcl adR: Advisor := new Advisor([4,1],<Red>);
		dcl adB: Advisor := new Advisor([4,10],<Black>);
		brd.board := {
			[4,1] |-> adR,
			[4,10] |-> adB
		};
		assertTrue(brd.board([4,1]).getCoord() = [4,1]);
		assertTrue(brd.board([4,1]) = adR);
			
		brd.moveTo([4,1],[5,2]);
		
		assertTrue(brd.board([5,2]).getCoord() = [5,2]);
		assertTrue(brd.board([5,2]) = adR);
		
		--cant go out of palace test
		
		brd.moveTo([5,2],[4,3]);
		brd.moveTo([4,3],[5,4]);
		
		assertTrue(brd.board([4,3]).getCoord() = [4,3]);
		assertTrue(brd.board([4,3]) = adR);
		
		brd.setPlayer(<Black>);
		-- Black
		
		assertTrue(brd.board([4,10]).getCoord() = [4,10]);
		assertTrue(brd.board([4,10]) = adB);
			
		brd.moveTo([4,10],[5,9]);
		
		assertTrue(brd.board([5,9]).getCoord() = [5,9]);
		assertTrue(brd.board([5,9]) = adB);
		
		--cant go out of palace test
		
		brd.moveTo([5,8],[4,8]);
		brd.moveTo([4,8],[5,7]);
		
		assertTrue(brd.board([4,8]).getCoord() = [4,8]);
		assertTrue(brd.board([4,8]) = adB);
	);
	
	
	public static main: () ==> ()
 	main() == (
		new AdvisorTest().testFreeMovement();
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end AdvisorTest