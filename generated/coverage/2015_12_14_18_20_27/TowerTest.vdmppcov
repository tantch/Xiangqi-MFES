class TowerTest
instance variables
	brd: Board := new Board();
operations

	private assertTrue: bool ==> ()
		assertTrue(cond) == return
	pre cond;
	private testFreeMovement: () ==> ()
	testFreeMovement() == (
		
		--Red
		
		dcl trR: Tower := new Tower([1,1],<Red>);
		dcl trB: Tower := new Tower([5,10],<Black>);
		brd.board := {
			[1,1] |-> trR,
			[5,10] |-> trB
		};
		assertTrue(brd.board([1,1]).getCoord() = [1,1]);
		assertTrue(brd.board([1,1]) = trR);
			
		--move vertically
		brd.moveTo([1,1],[1,4]);
		
		assertTrue(brd.board([1,4]).getCoord() = [1,4]);
		assertTrue(brd.board([1,4]) = trR);
		--move hor
		assertTrue(brd.board([1,4]).freeToMove([4,4],brd));
		brd.moveTo([1,4],[4,4]);
		assertTrue(brd.board([4,4]).getCoord() = [4,4]);
		assertTrue(brd.board([4,4]) = trR);
		
		brd.setPlayer(<Black>);
		-- Black
		
			assertTrue(brd.board([5,10]).getCoord() = [5,10]);
		assertTrue(brd.board([5,10]) = trB);
			
		--move vertically
		brd.moveTo([5,10],[5,6]);
		assertTrue(brd.board([5,6]).getCoord() = [5,6]);
		assertTrue(brd.board([5,6]) = trB);
		--move hor
		brd.moveTo([5,6],[8,6]);
		assertTrue(brd.board([8,6]).getCoord() = [8,6]);
		assertTrue(brd.board([8,6]) = trB);
		
	);
	
	
	public static main: () ==> ()
 	main() == (
		new TowerTest().testFreeMovement();
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end TowerTest