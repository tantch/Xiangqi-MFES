class Board
types
	public Player = <Black> | <Red>;
values
	public FILES = 9; -- width
	public RANKS = 10; --length
instance variables
	private currentPlayer: Player := <Red>;
	private board: map seq of nat1 to [Piece] := {|->};
operations
 public Board : () ==> Board
  Board() ==
  (
  	board := {
  	  [5,1] |-> new General([5,1],<Red>)
  	};
  );
	
	public moveTo: seq of nat1 * seq of nat1 ==> ()
	moveTo(coord1,coord2) ==(
		if(isEmpty(coord2)) then(
			dcl pc1: Piece := board(coord1); 
			board := board ++ { coord1 |-> nil};
			board := board ++ { coord2 |-> pc1 };
		);
		if(isEatable(coord2)) then(
			dcl pc1: Piece := board(coord1); 
			board := board ++ { coord1 |-> nil};
			board := board ++ { coord2 |-> pc1 };
		);
	)
	pre coord1 <> coord2 and coord1 in set dom board and board(coord1) <> nil and board(coord1).color = currentPlayer; --verificar cordandas dentro ods limites
	
	public getPiece : seq of nat1 ==> Piece
	getPiece(coord) ==
		return board(coord)
	pre coord in set dom board and board(coord) <> nil;
	
	private isEatable : seq of nat1 ==> bool
	isEatable(coord) == 
		return currentPlayer <> board(coord).color
		pre coord in set dom board and board(coord) <> nil;
	
	private isEmpty : seq of nat1 ==> bool
	isEmpty(coord) == (
		if(coord in set dom board) then (
			return board(coord) = nil;
		)
		else(
			return true;
		)
	);	 
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Board