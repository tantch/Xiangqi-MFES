class Tower is subclass of Piece
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
	public Tower : seq of nat1 * Color ==> Tower
		Tower(a_coord,a_color) ==(
			Piece(a_coord,a_color);
		);
	public canMoveTo : seq of nat1 ==> bool
		canMoveTo(a_coord) ==(
			return (coord(1) - a_coord(1) = 0) or (coord(2) - a_coord(2) = 0 );
			)
			
	pre a_coord <> coord;
	public moveTo : seq of nat1 ==> ()
		moveTo(a_coord) ==(
			coord := a_coord
		)
	pre a_coord <> coord;
	public freeToMove : seq of nat1 * Board ==> bool
	freeToMove(a_coord,board) == (
	
		dcl temp : nat1;
		
		
		if (a_coord(1) - coord(1) =0)
			then( 
					temp := coord(2);
					while(temp < a_coord(2))
								do (temp := temp + 1;
										if(not(board.isEmpty([coord(1),temp])))
												then return false);
					return true;
			)
			
			else if(a_coord(2) - coord(2) =0)
			then(
					temp := coord(1);
					while(temp < a_coord(1))
								do (temp := temp + 1;
										if(not(board.isEmpty([temp,coord(2)])))
												then return false);
					return true;
			)
			else
			return false;
		
		
		
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Tower
			
			
			
			
			
			
			
			
			
			
			