class ElephantTest
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	brd: Board := new Board();
operations

	private assertTrue: bool ==> ()
		assertTrue(cond) == return
	pre cond;
	private testFreeMovement: () ==> ()
	testFreeMovement() == (
		
		--Red
		
		dcl elR: Elephant := new Elephant([3,1],<Red>);
		dcl elB: Elephant := new Elephant([3,10],<Black>);
		brd.board := {
			[3,1] |-> elR,
			[3,10] |-> elB
		};
		assertTrue(brd.board([3,1]).getCoord() = [3,1]);
		assertTrue(brd.board([3,1]) = elR);
			
		brd.moveTo([3,1],[5,3]);
		
		assertTrue(brd.board([5,3]).getCoord() = [5,3]);
		assertTrue(brd.board([5,3]) = elR);
		
		--cant cross river test
		
		brd.moveTo([5,3],[3,5]);
		brd.moveTo([3,5],[5,7]);
		
		assertTrue(brd.board([3,5]).getCoord() = [3,5]);
		assertTrue(brd.board([3,5]) = elR);
		
		brd.setPlayer(<Black>);
		-- Black
		
		assertTrue(brd.board([3,10]).getCoord() = [3,10]);
		assertTrue(brd.board([3,10]) = elB);
			
		brd.moveTo([3,10],[5,8]);
		
		assertTrue(brd.board([5,8]).getCoord() = [5,8]);
		assertTrue(brd.board([5,8]) = elB);
		
		--cant cross river test
		
		brd.moveTo([5,8],[3,6]);
		brd.moveTo([3,6],[5,4]);
		
		assertTrue(brd.board([3,6]).getCoord() = [3,6]);
		assertTrue(brd.board([3,6]) = elB);
	);
	
	
	public static main: () ==> ()
 	main() == (
		new ElephantTest().testFreeMovement();
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end ElephantTest