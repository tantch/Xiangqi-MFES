class Board
types
	public Player = <Black> | <Red>;
values
	public FILES = 9; -- width
	public RANKS = 10; --length
instance variables
	private currentPlayer: Player := <Black>;
	private board: map seq of nat1 to Piece := {|->};
operations
 public Board : () ==> Board
  Board() ==
  (
  	board := {
  	  [1,1] |-> new Piece(),[2,1] |-> new Piece(),[3,1] |-> new Piece(),[4,1] |-> new Piece(),[5,1] |-> new Piece(),[6,1] |-> new Piece(),[7,1] |-> new Piece(),[8,1] |-> new Piece(),[9,1] |-> new Piece(),[10,1] |-> new Piece(),
  	  [1,2] |-> new Piece(),[2,2] |-> new Piece(),[3,2] |-> new Piece(),[4,2] |-> new Piece(),[5,2] |-> new Piece(),[6,2] |-> new Piece(),[7,2] |-> new Piece(),[8,2] |-> new Piece(),[9,2] |-> new Piece(),[10,2] |-> new Piece(),
  	  [1,3] |-> new Piece(),[2,3] |-> new Piece(),[3,3] |-> new Piece(),[4,3] |-> new Piece(),[5,3] |-> new Piece(),[6,3] |-> new Piece(),[7,3] |-> new Piece(),[8,3] |-> new Piece(),[9,3] |-> new Piece(),[10,3] |-> new Piece(),
  	  [1,4] |-> new Piece(),[2,4] |-> new Piece(),[3,4] |-> new Piece(),[4,4] |-> new Piece(),[5,4] |-> new Piece(),[6,4] |-> new Piece(),[7,4] |-> new Piece(),[8,4] |-> new Piece(),[9,4] |-> new Piece(),[10,4] |-> new Piece(),
  	  [1,5] |-> new Piece(),[2,5] |-> new Piece(),[3,5] |-> new Piece(),[4,5] |-> new Piece(),[5,5] |-> new Piece(),[6,5] |-> new Piece(),[7,5] |-> new Piece(),[8,5] |-> new Piece(),[9,5] |-> new Piece(),[10,5] |-> new Piece(),
  	  [1,6] |-> new Piece(),[2,6] |-> new Piece(),[3,6] |-> new Piece(),[4,6] |-> new Piece(),[5,6] |-> new Piece(),[6,6] |-> new Piece(),[7,6] |-> new Piece(),[8,6] |-> new Piece(),[9,6] |-> new Piece(),[10,6] |-> new Piece(),
  	  [1,7] |-> new Piece(),[2,7] |-> new Piece(),[3,7] |-> new Piece(),[4,7] |-> new Piece(),[5,7] |-> new Piece(),[6,7] |-> new Piece(),[7,7] |-> new Piece(),[8,7] |-> new Piece(),[9,7] |-> new Piece(),[10,7] |-> new Piece(),
  	  [1,8] |-> new Piece(),[2,8] |-> new Piece(),[3,8] |-> new Piece(),[4,8] |-> new Piece(),[5,8] |-> new Piece(),[6,8] |-> new Piece(),[7,8] |-> new Piece(),[8,8] |-> new Piece(),[9,8] |-> new Piece(),[10,8] |-> new Piece(),
  	  [1,9] |-> new Piece(),[2,9] |-> new Piece(),[3,9] |-> new Piece(),[4,9] |-> new Piece(),[5,9] |-> new Piece(),[6,9] |-> new Piece(),[7,9] |-> new Piece(),[8,9] |-> new Piece(),[9,9] |-> new Piece(),[10,9] |-> new Piece()
  	};
  );
	public moveTo: seq of nat1 * seq of nat1 ==> ()
	moveTo(cord1,cord2) ==(
		dcl pc1: Piece := board(cord1); 
		board := board ++ { cord1 |-> new Piece()};
		board := board ++ { cord2 |-> pc1 };
	)
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Board