class Horse is subclass of Piece
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
	public Horse : seq of nat1 * Color ==> Horse
		Horse(a_coord,a_color) ==(
			Piece(a_coord,a_color);
		);
	public canMoveTo : seq of nat1 ==> bool
		canMoveTo(a_coord) ==(
			return (abs(coord(1) - a_coord(1)) = 2 and abs(coord(2) - a_coord(2)) = 1 ) or (abs(coord(1) - a_coord(1)) = 1 and abs(coord(2) - a_coord(2)) = 2 );
			
		)
	pre a_coord <> coord;
	public moveTo : seq of nat1 ==> ()
		moveTo(a_coord) ==(
			coord := a_coord
		)
	pre a_coord <> coord;
	
	public freeToMove : seq of nat1 * Board ==> bool
	freeToMove(a_coord,board) == (
		if(abs(a_coord(1) - coord(1)) = 2 ) then(
			dcl tem: nat1 := coord(1) + (a_coord(1) - coord(1))/2;
			return board.isEmpty([tem,coord(2)]);
		)
		else(
			dcl tem: nat1 := coord(2) + (a_coord(2) - coord(2))/2;
			return board.isEmpty([coord(1),tem]);
		)
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here

end Horse