class Cannon is subclass of Piece
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
	public Cannon : seq of nat1 * Color ==> Cannon
		Cannon(a_coord,a_color) ==(
			Piece(a_coord,a_color);
		);
	public canMoveTo : seq of nat1 ==> bool
		canMoveTo(a_coord) ==(
			return (coord(1) - a_coord(1) = 0) or (coord(2) - a_coord(2) = 0 );
			)
			
	pre a_coord <> coord;
	public moveTo : seq of nat1 ==> ()
		moveTo(a_coord) ==(
			coord := a_coord
		)
	pre a_coord <> coord;
	public freeToMove : seq of nat1 * Board ==> bool
	freeToMove(a_coord,board) == (
	
		dcl tempM : nat1;
		dcl tempP : nat1;
		dcl count : nat;
		
		if(board.isEmpty([a_coord(1),a_coord(2)]))
		then(
			if (a_coord(1) - coord(1) =0)
				then( 
						tempM := coord(2);
						while(tempM < a_coord(2))
									do (tempM := tempM + 1;
											if(not(board.isEmpty([coord(1),tempM])))
													then return false);
						return true;
				)
			
				else if(a_coord(2) - coord(2) =0)
				then(
						tempM := coord(1);
						while(tempM < a_coord(1))
									do (tempM := tempM + 1;
											if(not(board.isEmpty([tempM,coord(2)])))
													then return false);
						return true;
				)
				else
				return false;
			)
			
		else if (not(board.isEmpty([a_coord(1),a_coord(2)])))
			then(
					count := 0;
					tempP := coord(1);
					if (a_coord(1) - coord(1) =0)
						then( 
							while(tempP < a_coord(1))
								do( tempP := tempP + 1;
									if(not(board.isEmpty([coord(1),tempP])))
										then count := count + 1;
										);
							if (not(count = 1))
									then return false;
							return true;
								)
					else if (a_coord(2) - coord(2) =0)
						then( 
							while(tempP < a_coord(2))
								do( tempP := tempP + 1;
									if(not(board.isEmpty([tempP,coord(2)])))
										then count := count + 1;
										);
							if (not(count = 1))
										then return false;
							return true;
								)
						else 
							return false;
						)
		 else
		 		return false;
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Cannon
			
			