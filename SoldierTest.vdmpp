class SoldierTest
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	brd: Board := new Board();
operations

	private assertTrue: bool ==> ()
		assertTrue(cond) == return
	pre cond;
	private testFreeMovement: () ==> ()
	testFreeMovement() == (
		
		--Red
		
		dcl solR: Soldier := new Soldier([1,4],<Red>);
		dcl solB: Soldier := new Soldier([1,7],<Black>);
		brd.board := {
			[1,4] |-> solR,
			[1,7] |-> solB
		};
		assertTrue(brd.board([1,4]).getCoord() = [1,4]);
		assertTrue(brd.board([1,4]) = solR);
			
		brd.moveTo([1,4],[1,5]);
		
		assertTrue(brd.board([1,5]).getCoord() = [1,5]);
		assertTrue(brd.board([1,5]) = solR);
		
		brd.moveTo([1,5],[1,6]);
		brd.moveTo([1,6],[2,6]);
		
		assertTrue(brd.board([2,6]).getCoord() = [2,6]);
		assertTrue(brd.board([2,6]) = solR);
		
		brd.moveTo([2,6],[2,5]);
		
		assertTrue(brd.board([2,6]).getCoord() = [2,6]);
		assertTrue(brd.board([2,6]) = solR);
		
		
		
		brd.setPlayer(<Black>);
		-- Black
		
		assertTrue(brd.board([1,7]).getCoord() = [1,7]);
		assertTrue(brd.board([1,7]) = solB);
			
		brd.moveTo([1,7],[1,6]);
		
		assertTrue(brd.board([1,6]).getCoord() = [1,6]);
		assertTrue(brd.board([1,6]) = solB);
		
		brd.moveTo([1,6],[1,5]);
		brd.moveTo([1,5],[2,5]);
		
		assertTrue(brd.board([2,5]).getCoord() = [2,5]);
		assertTrue(brd.board([2,5]) = solB);
		
		brd.moveTo([2,5],[2,6]);
		
		assertTrue(brd.board([2,5]).getCoord() = [2,5]);
		assertTrue(brd.board([2,5]) = solB);
	);
	
	
	public static main: () ==> ()
 	main() == (
		new SoldierTest().testFreeMovement();
	);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end SoldierTest